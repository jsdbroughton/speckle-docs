(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{617:function(e,t,n){"use strict";n.r(t);var o=n(44),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"local-development-environment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#local-development-environment"}},[e._v("#")]),e._v(" Local development environment")]),e._v(" "),n("p",[e._v("This is the recommended method for developing or debugging the Speckle Server locally.")]),e._v(" "),n("p",[e._v("If you plan to give others access to your Server instance, consider running it with production settings in a dedicated virtual machine (see "),n("a",{attrs:{href:"server-manualsetup"}},[e._v("manual setup")]),e._v(")")]),e._v(" "),n("h2",{attrs:{id:"tl-dr"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tl-dr"}},[e._v("#")]),e._v(" TL;DR")]),e._v(" "),n("p",[e._v("Assuming you have:")]),e._v(" "),n("ul",[n("li",[e._v("git with ssh key auth")]),e._v(" "),n("li",[e._v("nodejs 14")]),e._v(" "),n("li",[e._v("docker and docker-compose")])]),e._v(" "),n("p",[e._v("Also don't worry if you don't have all of these, the detailed instructions provide more info on alternative ways to achieve the same thing.\nThis is a high efficiency getting started step list.")]),e._v(" "),n("h3",{attrs:{id:"steps"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#steps"}},[e._v("#")]),e._v(" Steps")]),e._v(" "),n("ol",[n("li",[n("code",[e._v("$ git clone https://github.com/specklesystems/speckle-server.git")])]),e._v(" "),n("li",[n("code",[e._v("$ npm install")])]),e._v(" "),n("li",[n("code",[e._v("$ npx lerna bootstrap")])]),e._v(" "),n("li",[n("code",[e._v("$ npx lerna run build")])]),e._v(" "),n("li",[n("code",[e._v("$ docker-compose -f docker-compose-deps.yml up -d")])]),e._v(" "),n("li",[n("code",[e._v("$ cp packages/server/.env-example packages/server/.env")])]),e._v(" "),n("li",[n("code",[e._v("$ npx lerna run dev --parallel")])])]),e._v(" "),n("p",[e._v("Wait for the frontend to build, and voila, you have a fully functional Speckle Server running at "),n("a",{attrs:{href:"http://localhost:3000",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:3000"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("To run a specific part of the Speckle server stack, go to the "),n("a",{attrs:{href:"#components"}},[e._v("components")]),e._v(" section")]),e._v(" "),n("h2",{attrs:{id:"details"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#details"}},[e._v("#")]),e._v(" Details")]),e._v(" "),n("p",[e._v("Let's step back and see what we did.")]),e._v(" "),n("ol",[n("li",[e._v("To clone the repo git with "),n("a",{attrs:{href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",target:"_blank",rel:"noopener noreferrer"}},[e._v("ssh key"),n("OutboundLink")],1),e._v(" auth was used.\nYou can use https based auth too, and can also gather some bonus points by using the "),n("code",[e._v("gh-cli")]),e._v(" ðŸ˜„")]),e._v(" "),n("li",[e._v("Install the root level npm packages, you can use the shorthand "),n("code",[e._v("$ npm i")])]),e._v(" "),n("li",[e._v("The monorepo is managed by "),n("a",{attrs:{href:"https://lerna.js.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("lerna"),n("OutboundLink")],1),e._v(".\nThis tool is necessary to create the proper connections between the different packages.\nTo get things set up first we need to bootstrap the project dependencies with lerna. This step will install all required npm dependencies for all the packages.\n"),n("code",[e._v("$ npx lerna bootstrap")]),e._v(". Please note, that this step "),n("strong",[e._v("can take a while")]),e._v(" to finish.")]),e._v(" "),n("li",[e._v("Some of the local packages (viewer, object loader) has to be built the first time so that all packages are linked properly.\nThis can be done easily with lerna, where the lerna run command will execute the given npm script in all packages where it exists.\nSo running "),n("code",[e._v("$ npx lerna run build")]),e._v(" triggers all build commands.")]),e._v(" "),n("li",[e._v("In this step, all the required services are started via docker-compose.\nThe "),n("code",[e._v("docker-compose-deps.yml")]),e._v(" file contains a sensible default setup of all the required non Speckle developed services.\nThis config by no means meant to be used in production.\nIf you are not running these dependencies via docker-compose, please make sure, that their configuration options are in line with either the compose file or the individual package configurations.")]),e._v(" "),n("li",[e._v("In this step the provided example file is copied to a "),n("code",[e._v(".env")]),e._v(" file with keeping the default values.\nHere again we are providing a set of sensible defaults that work out of the box if you follow this guide, but do make sure to reflect any changes you make in you environment.")]),e._v(" "),n("li",[e._v("Just like above, we use lerna to run the "),n("code",[e._v("dev")]),e._v(" script in each package. This is probably not the most efficient way, since it starts more package in development mode, than needed, but its the easiest command that gets a server up and running. When developing, you probably want to run each component separately.")])]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("IMPORTANT")]),e._v(" "),n("p",[e._v("Don't forget to set up the variables in the "),n("code",[e._v(".env")]),e._v(" file according to your deployment. You can get started by copying the "),n("code",[e._v(".env-example")]),e._v(" file to "),n("code",[e._v(".env")]),e._v(" and then edit it.")])]),e._v(" "),n("h2",{attrs:{id:"components"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[e._v("#")]),e._v(" Components")]),e._v(" "),n("p",[e._v("To run a barebones Speckle Server, you need to run:")]),e._v(" "),n("ul",[n("li",[e._v("the "),n("code",[e._v("frontend")]),e._v(" package (see "),n("a",{attrs:{href:"https://github.com/specklesystems/speckle-server/tree/main/packages/frontend",target:"_blank",rel:"noopener noreferrer"}},[e._v("the readme.md file in the git repo"),n("OutboundLink")],1),e._v(")")]),e._v(" "),n("li",[e._v("the "),n("code",[e._v("server")]),e._v(" package (see "),n("a",{attrs:{href:"https://github.com/specklesystems/speckle-server/tree/main/packages/server",target:"_blank",rel:"noopener noreferrer"}},[e._v("the readme.md file in the git repo"),n("OutboundLink")],1),e._v(")")])]),e._v(" "),n("p",[e._v("Optionally, to enable extra functionality, microservices should be run separately. For more information, check their "),n("code",[e._v("README.md")]),e._v(" file in the git repository:")]),e._v(" "),n("ul",[n("li",[e._v("the "),n("code",[e._v("preview-service")]),e._v(" package generates preview images for streams (see "),n("a",{attrs:{href:"https://github.com/specklesystems/speckle-server/tree/main/packages/preview-service",target:"_blank",rel:"noopener noreferrer"}},[e._v("the readme.md file in the git repo"),n("OutboundLink")],1),e._v(")")]),e._v(" "),n("li",[e._v("the "),n("code",[e._v("webhook-service")]),e._v(" package is responsible with calling the configured webhooks")]),e._v(" "),n("li",[e._v("the "),n("code",[e._v("fileimport-service")]),e._v(" package parses and imports uploaded files into Speckle.")])]),e._v(" "),n("p",[e._v("Detailed instructions for running them locally are kept up to date in their respective "),n("code",[e._v("readme.md")]),e._v(" files.")]),e._v(" "),n("p",[e._v("In this deployment type, the frontend Vue app will listen by default on the local interface (not available over the network) on "),n("code",[e._v("port 8080")]),e._v(", but will have no knowledge about the "),n("code",[e._v("server")]),e._v(" component, and thus "),n("strong",[e._v("should not be accessed directly")]),e._v(".")]),e._v(" "),n("p",[e._v("The server component will listen on the local interface (not available over the network) on "),n("code",[e._v("port 3000")]),e._v(", and will proxy the frontend requests to the frontend component (as configured in .env file).")])])}),[],!1,null,null,null);t.default=a.exports}}]);